#!/usr/bin/env python3

"""
sysmon - a SYStem MONitor written in python, designed to be easy
to understand, and "ready to use", without installing dependecies (except curses)

made by dev64 (also known as .dev, devlocalhost)
"""

import sys
import json
import curses
import select
import argparse
import importlib

from datetime import datetime
from util import util


def custom_help_formatter(prog):
    """fixing the ugly looking help menu"""

    return argparse.HelpFormatter(prog, max_help_position=60)


def parse_arguments():
    """create arguments"""

    types_map = {
        "int": int,
        "float": float,
        "str": str,
    }

    parser = argparse.ArgumentParser(description="sysmon, a system monitor made in python | github.com/devlocalhost/sysmon", formatter_class=custom_help_formatter)

    with open("util/arguments.json") as arguments:
        data = json.load(arguments)

        for arg in data:
            # Get the type string from JSON and convert it to the actual type
            arg_type = arg["kwargs"].get("type")

            if arg_type:
                arg["kwargs"]["type"] = types_map[arg_type]

            parser.add_argument(*arg["options"], **arg["kwargs"])

    return parser.parse_args()


# formatting and arguments

# sysmon printing part


def start_sysmon(stdscr, plugins, sleep):
    """main printing method, what you see when you run sysmon"""

    stdscr.nodelay(True)

    curses.curs_set(0)
    curses.use_default_colors()

    formatters = [importlib.import_module(func) for func in plugins]

    try:
        while True:
            stdscr.erase()

            stdscr.addstr(
                f" --- Sysmon | {datetime.now().strftime('%I:%M:%S %p')} "
                + "-" * 42
                + "\n"
            )

            for formatter in formatters:
                stdscr.addstr(formatter.main())

            stdscr.addstr(f" {'-' * 67}")
            stdscr.refresh()

            rlist = select.select([sys.stdin], [], [], sleep)

            if rlist:
                kinput = stdscr.getch()

                if kinput == ord("q"):
                    for formatter in formatters:
                        try:
                            formatter.end()

                        except AttributeError:
                            pass

                    curses.curs_set(1)

                    break

    except curses.error:
        sys.exit("Not enough terminal space. Please resize your terminal")

    except KeyboardInterrupt:
        curses.endwin()
        curses.curs_set(1)

    curses.endwin()


def main():
    """execute sysmon"""

    # plugins_array = [
    #     "plugins.cpuinfo",
    #     "plugins.meminfo",
    #     "plugins.loadavg",
    #     "plugins.procpid",
    #     "plugins.netstats",
    # ]
    plugins_array = [
        "formatters.cpuinfo",
        "formatters.meminfo",
        "formatters.loadavg",
        "formatters.procpid",
        "formatters.netstats",
    ]

    for argument in args.__dict__:
        if argument.startswith("no"):
            if getattr(args, argument):
                argument = f"formatters.{argument.replace('no', '')}"
                plugins_array.pop(plugins_array.index(argument))

    curses.wrapper(start_sysmon, plugins_array, args.sleep)


if __name__ == "__main__":
    args = parse_arguments()

    if args.temp:
        util.SHOW_TEMPERATURE = False

    if args.swap:
        util.SHOW_SWAP = False

    if args.procs:
        util.PROCS = args.procs

    if args.metric:
        util.CONVERSION_TYPE = 1000

    if args.interface:
        util.INTERFACE = args.interface

    if args.ip:
        util.SHOW_LOCAL_IP = False

    if args.debug:
        util.DEBUGGING = True

    main()
